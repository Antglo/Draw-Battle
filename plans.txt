Create a web based game where 2 users battle using their drawings.

+Frontend (React.js):
+
+    Handles the UI (drawing canvas, game state updates).
+    Communicates with the backend via REST APIs and WebSocket.
----------------------------------------------------------------
+Backend (FastAPI):
+
+    Handles game logic, user management, and API requests.
+    Processes and classifies drawings using ML models.
----------------------------------------------------------------
+Database (PostgreSQL):
+
+    Stores user data, game history, leaderboards.
----------------------------------------------------------------
+Real-Time Communication:
+
+    Uses WebSockets for live updates.
----------------------------------------------------------------
+ML Model Server (Optional):
+
+    Serves the drawing classification model as a microservice.
----------------------------------------------------------------

File and Folder STRUCTURE:
Draw-Battle/
│
├── backend/                       # Backend logic and API
│   ├── app/                       
│   │   ├── __init__.py            # Initialize your application
│   │   ├── config.py              # Configuration settings (DB, secret keys)
│   │   ├── models.py              # Database models (SQLAlchemy)
│   │   ├── services/              # Logic for game and interactions
│   │   │   ├── __init__.py        # Service initialization
│   │   │   ├── game_logic.py      # Game logic functions
│   │   │   └── player_logic.py    # Player-related functions
│   │   ├── api/                   # API routes for interactions (Flask routes or FastAPI)
│   │   │   ├── __init__.py
│   │   │   ├── routes.py          # Routes handling image submission, game status, etc.
│   │   │   └── auth.py            # User authentication (if applicable)
│   │   └── main.py                # Main entry point for the application
│   ├── tests/                     # Tests for backend logic
│   │   ├── __init__.py
│   │   ├── test_game_logic.py     # Tests for game logic
│   │   └── test_routes.py         # Tests for API routes
│   ├── requirements.txt           # Backend dependencies (Flask, SQLAlchemy, etc.)
│   └── Dockerfile                 # Dockerfile for containerizing the backend app
│
├── frontend/                      # Frontend code (Dash or Flask with Jinja2)
│   ├── app/                       
│   │   ├── __init__.py            # Initialize the frontend app
│   │   ├── layouts.py             # Layout and UI components
│   │   ├── callbacks.py           # Callbacks for interactivity (if using Dash)
│   │   └── assets/                # Static files like images, CSS, JS
│   │       └── style.css          # Custom CSS for frontend design
│   ├── requirements.txt           # Frontend dependencies (Dash, Flask, etc.)
│   └── Dockerfile                 # Dockerfile for containerizing the frontend app
│
├── docker-compose.yml             # Docker Compose configuration for running everything together
├── .env                           # Environment variables (for DB credentials, secret keys)
├── README.md                      # Project documentation and setup instructions
└── venv/                          # Virtual environment for dependencies





Draw-Battle/
├── backend/
│   ├── app/
│   │   ├── api/
│   │   │   └── routes.py  # Defines FastAPI routes (API endpoints)
│   │   ├── services/
│   │   │   └── game_logic.py  # Core game logic (handles player submissions, determines winner)
│   │   ├── ml/
│   │   │   └── classifier.py  # Handles image classification using pre-trained models
│   │   ├── main.py  # Entry point for the FastAPI app
│   │   └── __init__.py
│   └── tests/
│       └── test-pics/  # Contains test images
└── venv/  # Python virtual environment


Key Concepts for the Game Loop
    Game Rounds: Each player has 3 pictures to draw, and for each round, the pictures are uploaded and compared to an opponent's drawing.
    XP Gain: The player with the highest confidence (from the model) in each round wins, and they gain XP.
    Leveling System: Based on XP, players are matched with others at similar levels.
    ----------------------------------------------------------------
Updated Game Flow
1. Player Submissions
    Each player will submit 3 pictures. For each picture:
        Image Classification: The picture is sent to the model for classification.
        Confidence Comparison: The confidence scores are compared between the two players for each picture.
2. Round Logic
    The game loop runs through 3 rounds (one for each picture).
    For each round:
        Each player submits a picture.
        The pictures are classified, and the player with the highest confidence wins the round.
        The overall winner of the round gains XP.
3. XP System
    Each win in a round gives the player a set amount of XP.
    The XP is added to the player’s current XP.
    Players with similar XP are matched for the next round.
4. Leveling Up
    As a player accumulates XP, they move to a higher level.
    The system can check the player’s XP to find opponents with similar XP.








Draw-battle/
    backend/
        app/
            api/
                __init__.py
                routes.py
            core/
                __init__.py
                config.py
                models.py
            ml/
                model/
                    mobilenet_model.h5
                __init__.py
                classifier.py
            models/
                __init__.py
                game.py
            services/
                __init__.py
                game_logic.py
            static/
            templates/
            __init__.py
            main.py
        tests/